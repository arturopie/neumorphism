# > name: Name of your project
# > descr: Description of your project
# > demo: Link to your project
# > tags: List of technologies you used in your projects
#
# Example of a project
# - name: project X
#   descr: "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam"
#   demo: https://example.com/
#   tags:
#     - tag: MongoDB
#     - tag: Express
#     - tag: AngularJS
#     - tag: Node

- name: Migration to AWS ECS & Terraform
  descr: "I lead the migration to Docker, AWS ECS, Terraform, and the 12 Factor App methodology on all applications at Nulogy. I started by migrating one of our apps. The previous infrastructure was using mutable EC2 instances, and it was unreliable. Deploys would often bring the app down, and most of the infrastructure was manually provisioned. By the end of the migration, all our infrastructure was provisioned via Terraform and Docker. The success from this project allowed the creation of a new team (the Dev Accelerator team) to migrate the rest of the apps. Once all apps were migrated, we reduced our infrastructure bill by 50%, increased service availability, and deploys reliability. It also supported the move to Continuous Delivery."
  demo:
  tags:
    - tag: AWS ECS
    - tag: Docker
    - tag: Infrastructure as Code
    - tag: The 12 Factor App

- name: Migration to Continuous Delivery
  descr: "This project was a company wide initiative to adopt Continuous Delivery (CD) across all our products. It involved adopting new tools and introducing process changes and techniques across all the teams. I used Docker, Buildkite CI and Knapsack to create a CI/CD pipeline for running all our automated tests, linters, security checks, docker builds and deploys. I reduced the cycle time for running all our automated tests from more than 2 hours to less than 10 minutes. I improved our deploy pipeline to increase safety and capacity for more frequent deploys. I also trained the developers on how to write zero-downtime DB migrations, and showed them the benefits of increasing deploy frequency. After project completion, the team was able to reduce deployment frequency from 1.58/week to 5/day, reduce the lead time for changes from 3 weeks to 25 minutes, reduce the time to restore service from 14.7 hours to 1 hour, and reduce change failure rate from 68.4% to 2.91%. I received the Nulogy Stars Award, the most important company award, after the completion of this project."
  demo:
  tags:
    - tag: Buildkite CI
    - tag: Terraform
    - tag: Docker
    - tag: DevOps

- name: Flaky Tracker
  descr: "This is a Hackday project I built to find the most expensive flaky (non transient) tests in a test suite. It is fully serverless and deploys on AWS using the Serverless framework. It extracts build artifacts and outputs from Buildkite jobs, analyze them to find flaky specs and save them in S3. It uses Quicksight as a BI to visualize the data."
  tags:
    - tag: TypeScript
    - tag: Serverless Framework
    - tag: AWS
    - tag: AWS Amplify
